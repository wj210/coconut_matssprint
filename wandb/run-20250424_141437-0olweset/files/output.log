Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 185.06 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 22260.67 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 185.55 examples/s]
Training Epoch: 1/6, batch 312/313 completed (loss: 0.271: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [09:26<00:00,  1.81s/it] 
logging training data
eval loss 0.3247046619653702
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<1.5*2=3>>
<<3+2.5=5.5>>
<<3+3+5.5=11.5>>
### 11.5<|end_of_text|>'
Extracted Output: '11.5'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:24<09:45, 24.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2*8=16>>
<<3*16=48>>
<<48/16=3>>
### 3<|end_of_text|>'
Extracted Output: '3'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:46<08:49, 23.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<5*2=10>>
<<90-25-10=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [01:03<07:21, 20.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<2*4=8>>
<<26-8=18>>
<<18/2=9>>
### 9<|end_of_text|>'
Extracted Output: '9'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:14<05:48, 16.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<135*2=270>>
<<270+135+2=397>>
### 397<|end_of_text|>'
Extracted Output: '397'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:24<04:43, 14.17s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:36<04:14, 13.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.14:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:49<03:59, 13.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.12:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:59<03:30, 12.40s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:08<03:02, 11.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:21<02:55, 11.70s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:35<02:54, 12.47s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:45<02:31, 11.65s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:57<02:23, 11.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:08<02:06, 11.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:18<01:49, 10.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:28<01:37, 10.81s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:38<01:25, 10.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:49<01:14, 10.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:02<01:08, 11.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:15<00:59, 11.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:27<00:47, 11.85s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:39<00:35, 11.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:51<00:24, 12.02s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:02<00:11, 11.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:15<00:00, 12.60s/it]
Device 0: Cor=9, CoT=1, Total=25
Accuracy on validation set: 30 / 100 = 0.3
CoT match on validation set: 6 / 100 = 0.06
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 162.29 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 21769.25 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 188.43 examples/s]
Training Epoch: 2/6, batch 312/313 completed (loss: 0.1382: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [08:35<00:00,  1.65s/it]
logging training data
eval loss 0.3233340233564377
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=9.5>>
### 9.5<|end_of_text|>'
Extracted Output: '9.5'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:15<06:01, 15.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>
### 3<|end_of_text|>'
Extracted Output: '3'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:27<05:04, 13.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<25+2=27>>
<<90-27=63>>
### 63<|end_of_text|>'
Extracted Output: '63'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:37<04:20, 11.84s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<26-4=22>>
<<22/2=11>>
<<11/3=3.67>>
### 3.67<|end_of_text|>'
Extracted Output: '3.67'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:47<03:57, 11.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<135*2=270>>
<<45+135+270=450>>
### 450<|end_of_text|>'
Extracted Output: '450'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [00:57<03:35, 10.79s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:08<03:28, 10.95s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:19<03:12, 10.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:30<03:08, 11.10s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:40<02:47, 10.46s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [01:51<02:40, 10.71s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:06<02:47, 11.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:15<02:26, 11.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:28<02:20, 11.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [02:39<02:04, 11.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:02<02:29, 14.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:12<02:02, 13.59s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:26<01:48, 13.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:36<01:28, 12.62s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [03:50<01:17, 12.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:01<01:02, 12.48s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:13<00:49, 12.32s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:27<00:38, 12.84s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:43<00:27, 13.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [04:55<00:13, 13.09s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:08<00:00, 12.33s/it]
Device 0: Cor=9, CoT=3, Total=25
Accuracy on validation set: 30 / 100 = 0.3
CoT match on validation set: 10 / 100 = 0.1
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 192.35 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 21759.78 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 179.91 examples/s]
Training Epoch: 3/6, batch 312/313 completed (loss: 0.1699: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [08:41<00:00,  1.67s/it]
logging training data
eval loss 0.3802071362733841
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=9.5>>
### 9.5<|end_of_text|>'
Extracted Output: '9.5'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:15<06:11, 15.48s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2+1+3=6>>
<<16/8=2>>
<<1/1=1>>
### 1<|end_of_text|>'
Extracted Output: '1'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:27<05:13, 13.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<5*2=10>>
<<90-25-10=55>>
### 55<|end_of_text|>'
Extracted Output: '55'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:37<04:21, 11.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<2*4=8>>
<<26-8=18>>
<<18/3=6>>
### 6<|end_of_text|>'
Extracted Output: '6'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:49<04:11, 12.00s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<135*2=270>>
<<45+135+270=450>>
### 450<|end_of_text|>'
Extracted Output: '450'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:04<04:16, 12.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:15<03:53, 12.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:26<03:33, 11.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:37<03:15, 11.49s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:46<02:51, 10.73s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:00<02:58, 11.90s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.55:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:16<03:02, 13.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:26<02:39, 12.30s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.46:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:38<02:26, 12.22s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [02:49<02:08, 11.71s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.53:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [02:59<01:53, 11.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:10<01:39, 11.10s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:20<01:27, 10.92s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:31<01:15, 10.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [03:44<01:09, 11.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [03:57<00:59, 11.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:08<00:46, 11.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:21<00:36, 12.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:34<00:24, 12.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [04:47<00:12, 12.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [04:59<00:00, 11.97s/it] 
Device 0: Cor=10, CoT=2, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 8 / 100 = 0.08
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 162.46 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 20259.37 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 174.59 examples/s]
Training Epoch: 4/6, batch 312/313 completed (loss: 0.0511: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [08:36<00:00,  1.65s/it]
logging training data
eval loss 0.3998056650161743
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10.5>>
### 10.5<|end_of_text|>'
Extracted Output: '10.5'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:15<06:01, 15.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2+1+3=6>>
<<6*16=96>>
<<96/8=12>>
### 12<|end_of_text|>'
Extracted Output: '12'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:27<05:10, 13.51s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<5*2=10>>
<<90-10=80>>
### 80<|end_of_text|>'
Extracted Output: '80'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:38<04:27, 12.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<2*4=8>>
<<8+26=34>>
<<34/3=11.33>>
### 11.33<|end_of_text|>'
Extracted Output: '11.33'
Test accuracy: 0.0:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:48<04:01, 11.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<135*2=270>>
<<45+135+270=405>>
### 405<|end_of_text|>'
Extracted Output: '405'
Test accuracy: 0.0:  20%|[34m‚ñà‚ñà        [0m| 5/25 [00:58<03:39, 10.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:08<03:21, 10.60s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:20<03:22, 11.23s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.12:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:33<03:19, 11.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.11:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:47<03:16, 12.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.1:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:00<03:06, 12.45s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:16<03:11, 13.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:28<02:51, 13.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.15:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:41<02:36, 13.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.21:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [02:51<02:15, 12.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:04<02:04, 12.43s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:14<01:45, 11.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:28<01:37, 12.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.28:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:38<01:20, 11.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [03:50<01:10, 11.78s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:03<01:00, 12.09s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:16<00:50, 12.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:28<00:37, 12.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:42<00:25, 12.70s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [04:54<00:12, 12.61s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:08<00:00, 12.33s/it]
Device 0: Cor=9, CoT=2, Total=25
Accuracy on validation set: 33 / 100 = 0.33
CoT match on validation set: 10 / 100 = 0.1
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 167.31 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 20351.35 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 177.23 examples/s]
Training Epoch: 5/6, batch 312/313 completed (loss: 0.0125: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [08:36<00:00,  1.65s/it]
logging training data
eval loss 0.4857253283262253
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<2*1.5=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 1.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:25, 13.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2+1+3=6>>
<<6*3=18>>
<<18/16=1.25>>
### 2<|end_of_text|>'
Extracted Output: '2'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:26<05:05, 13.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<5-2=3>>
<<90-3=87>>
### 87<|end_of_text|>'
Extracted Output: '87'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:37<04:24, 12.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<2*4=8>>
<<26-8=18>>
<<18/2=9>>
### 9<|end_of_text|>'
Extracted Output: '9'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:46<03:48, 10.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<135*2=270>>
<<45+135+270=570>>
### 570<|end_of_text|>'
Extracted Output: '570'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [00:56<03:29, 10.49s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:06<03:19, 10.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.14:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:17<03:09, 10.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.12:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:31<03:20, 11.81s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:40<02:55, 10.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [01:53<02:51, 11.43s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:08<02:55, 12.51s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:20<02:40, 12.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:30<02:18, 11.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [02:40<02:03, 11.26s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [02:54<01:59, 11.95s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:06<01:47, 11.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:16<01:32, 11.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:26<01:17, 11.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [03:38<01:08, 11.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [03:50<00:56, 11.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:04<00:49, 12.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:18<00:37, 12.62s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:31<00:25, 12.86s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [04:43<00:12, 12.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [04:57<00:00, 11.89s/it]
Device 0: Cor=8, CoT=1, Total=25
Accuracy on validation set: 35 / 100 = 0.35
CoT match on validation set: 8 / 100 = 0.08
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 176.24 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20000/20000 [00:00<00:00, 21188.67 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 168.75 examples/s]
Training Epoch: 6/6, batch 312/313 completed (loss: 0.0547: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 313/313 [08:36<00:00,  1.65s/it]
logging training data
eval loss 0.44590480625629425
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '10' CoT = '<<1.5*2=3>>
<<3+2.5=5.5>>
<<1.5+3+5.5=10>>'
Full output: '<|begin_of_text|>Hannah has three dogs. The first dog eats 1.5 cups of dog food a day. The second dog eats twice as much while the third dog eats 2.5 cups more than the second dog. How many cups of dog food should Hannah prepare in a day for her three dogs?
<<2.5+2=4.5>>
<<1.5+4.5+2.5=9>>
<<9+4.5=13.5>>
### 13.5<|end_of_text|>'
Extracted Output: '13.5'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:15<06:19, 15.79s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '3' CoT = '<<2+1+3=6>>
<<6*8=48>>
<<48/16=3>>'
Full output: '<|begin_of_text|>Stephanie is planning dinners to cook for the week and needs to figure out how much of each ingredient she should buy at the grocery store. She is making three recipes that call for lower sodium soy sauce as a main ingredient. One bottle of lower sodium soy sauce holds 16 ounces. There are 8 ounces in 1 cup. The first recipe Stephanie is going to cook calls for 2 cups of lower sodium soy sauce. The second recipe calls for 1 cup. The third recipe calls for 3 cups. If Stephanie can only buy 1 whole bottle of soy sauce no matter how much she needs exactly, how many bottles of lower sodium soy sauce should Stephanie buy to allow for all three recipes?
<<2+1+3=6>>
<<6*16=96>>
<<96/8=12>>
### 12<|end_of_text|>'
Extracted Output: '12'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:28<05:21, 13.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '55' CoT = '<<90/5=18>>
<<18-5-2=11>>
<<11*5=55>>'
Full output: '<|begin_of_text|>Romeo buys five bars of chocolate at $5 each and sells these chocolates for a total of $90. If he uses packaging material that costs him $2 for each bar of chocolate, how much profit does he make for all the chocolates he sells?
<<5*5=25>>
<<5+2=7>>
<<90-7=83>>
### 83<|end_of_text|>'
Extracted Output: '83'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:38<04:25, 12.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '6' CoT = '<<4*2=8>>
<<26-8=18>>
<<18/3=6>>'
Full output: '<|begin_of_text|>Wade has called into a rest stop and decides to get food for the road. He buys a sandwich to eat now, one for the road, and one for in the evening. He also buys 2 drinks. If the drinks cost $4 each and Wade spends a total of $26 then how much, in dollars, did the sandwiches each cost?
<<2*4=8>>
<<26+8=34>>
<<34/2=17>>
### 17<|end_of_text|>'
Extracted Output: '17'
Test accuracy: 0.0:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:49<04:07, 11.77s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '450' CoT = '<<45*3=135>>
<<135*2=270>>
<<135+270+45=450>>'
Full output: '<|begin_of_text|>Jackson collects 45 hermit crabs, 3 spiral shells per hermit crab, and 2 starfish per spiral shell. How many souvenirs does he collect total?
<<45*3=135>>
<<2*2=4>>
<<45+135+4=182>>
### 182<|end_of_text|>'
Extracted Output: '182'
Test accuracy: 0.0:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:00<03:46, 11.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:10<03:25, 10.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:20<03:15, 10.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:32<03:10, 11.22s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.11:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:42<02:48, 10.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [01:53<02:43, 10.90s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:09<02:52, 12.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:19<02:30, 11.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:34<02:30, 12.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [02:45<02:13, 12.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [02:55<01:56, 11.67s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:07<01:44, 11.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:17<01:30, 11.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:27<01:15, 10.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [03:38<01:05, 10.95s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [03:50<00:55, 11.03s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:01<00:44, 11.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:14<00:35, 11.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [04:28<00:24, 12.46s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [04:40<00:12, 12.40s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [04:55<00:00, 11.80s/it] 
Device 0: Cor=10, CoT=4, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 13 / 100 = 0.13
