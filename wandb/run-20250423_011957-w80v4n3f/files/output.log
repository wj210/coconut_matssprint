Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 190.80 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:02<00:00, 24194.79 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 197.81 examples/s]
Training Epoch: 1/20, batch 781/782 completed (loss: 0.1417: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:10<00:00,  1.70s/it]
logging training data
eval loss 0.40717585384845734
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<12*2=24>>
<<4*1=4>>
<<100/4=25>>
### 25<|end_of_text|>'
Extracted Output: '25'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:56, 14.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*0.40=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:56, 15.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2.25*2=4.5>>
<<3.5*2=7>>
<<4.00+0.5+7+2.5+3.5=18>>
### 18<|end_of_text|>'
Extracted Output: '18'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:46<05:46, 15.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<130/12=10.8333333333333335>>
<<10*10=100>>
<<130-100=30>>
### 30<|end_of_text|>'
Extracted Output: '30'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:00<05:15, 15.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:15<05:01, 15.08s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:38<05:35, 17.66s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:51<04:48, 16.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [02:04<04:15, 15.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:15<03:41, 13.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:25<03:11, 12.77s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:48<03:41, 15.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [03:05<03:29, 16.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:18<03:01, 15.12s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.21:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:33<02:48, 15.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:50<02:36, 15.61s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.19:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:05<02:19, 15.46s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:17<01:55, 14.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:36<01:50, 15.81s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.21:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:55<01:40, 16.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:06<01:15, 15.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.24:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:24<01:03, 15.85s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:37<00:45, 15.10s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.26:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:46<00:26, 13.21s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:56<00:12, 12.32s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.28: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:14<00:00, 14.98s/it]
Device 0: Cor=7, CoT=1, Total=25
Accuracy on validation set: 32 / 100 = 0.32
CoT match on validation set: 9 / 100 = 0.09
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 166.52 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 31741.04 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 178.36 examples/s]
Training Epoch: 2/20, batch 781/782 completed (loss: 0.1772: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:15<00:00,  1.71s/it]
logging training data
eval loss 0.4229716509580612
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/12=.16666666666666666>>
<<2*12=24>>
<<24/2=12>>
<<12*100=1200>>
### 1200<|end_of_text|>'
Extracted Output: '1200'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:16<06:33, 16.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<40/100*600=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:32<06:09, 16.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.5=5.00>>
<<1*3.5=3.50>>
<<4.50+8+5+3.50=19.50>>
### 19.50'
Extracted Output: '19.50'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:54<06:58, 19.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:17<07:08, 20.42s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:29<05:47, 17.37s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:42<05:04, 16.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:56<04:35, 15.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [02:09<04:09, 14.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:23<03:50, 14.40s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:32<03:10, 12.67s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:48<03:11, 13.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [03:10<03:32, 16.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:21<02:54, 14.51s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:43<03:05, 16.89s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [04:05<03:03, 18.40s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:27<02:56, 19.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:37<02:12, 16.61s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:55<01:58, 16.90s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [05:12<01:42, 17.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:23<01:16, 15.30s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:44<01:07, 16.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [06:01<00:51, 17.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.26:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [06:10<00:29, 14.60s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [06:22<00:13, 13.81s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.24: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:37<00:00, 15.88s/it]
Device 0: Cor=6, CoT=1, Total=25
Accuracy on validation set: 32 / 100 = 0.32
CoT match on validation set: 6 / 100 = 0.06
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 167.82 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 28821.52 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 159.85 examples/s]
Training Epoch: 3/20, batch 781/782 completed (loss: 0.0977: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:16<00:00,  1.71s/it]
logging training data
eval loss 0.4340488165616989
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24*.5=12>>
<<12*12=144>>
<<100+144=244>>
### 244<|end_of_text|>'
Extracted Output: '244'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:48, 14.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
<<600-240=360>>
### 360<|end_of_text|>'
Extracted Output: '360'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:27<05:17, 13.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<4.50+3.50+0.50=9.00>>
<<2*2.5=5.00>>
<<9.00+5.00=14.00>>
### 14<|end_of_text|>'
Extracted Output: '14'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:47<06:04, 16.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:59<05:12, 14.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<20+15=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:11<04:31, 13.56s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:25<04:21, 13.75s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:37<04:00, 13.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:52<03:54, 13.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:04<03:28, 13.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:13<02:59, 11.94s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:36<03:32, 15.20s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:47<03:01, 13.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:58<02:37, 13.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:20<02:54, 15.89s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:43<02:58, 17.88s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:58<02:34, 17.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:10<02:03, 15.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:21<01:40, 14.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:39<01:32, 15.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:48<01:06, 13.37s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:10<01:04, 16.13s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:23<00:45, 15.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:34<00:27, 13.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:45<00:12, 12.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:59<00:00, 14.36s/it] 
Device 0: Cor=10, CoT=2, Total=25
Accuracy on validation set: 37 / 100 = 0.37
CoT match on validation set: 13 / 100 = 0.13
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 166.72 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 28341.46 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 159.76 examples/s]
Training Epoch: 4/20, batch 781/782 completed (loss: 0.0855: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:18<00:00,  1.71s/it]
logging training data
eval loss 0.49076396226882935
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24*.5=12>>
<<12/12=1>>
<<100/1=100>>
### 100<|end_of_text|>'
Extracted Output: '100'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:34, 13.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:29<05:45, 15.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<4.50+2.50=7>>
<<7+3.50=10.50>>
### 10.50<|end_of_text|>'
Extracted Output: '10.50'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:43<05:17, 14.43s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<130*10=1300>>
<<12*10=120>>
<<1300-120=1280>>
### 1280<|end_of_text|>'
Extracted Output: '1280'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:54<04:36, 13.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<20+15=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:09<04:37, 13.88s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:24<04:27, 14.06s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:39<04:19, 14.43s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:52<03:55, 13.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:03<03:28, 13.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:12<02:59, 11.97s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:30<03:13, 13.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:41<02:48, 12.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:54<02:34, 12.84s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:07<02:22, 12.91s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:27<02:30, 15.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:50<02:35, 17.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:06<02:16, 17.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:21<01:55, 16.48s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:42<01:46, 17.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:53<01:18, 15.80s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:10<01:04, 16.11s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:23<00:45, 15.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:32<00:26, 13.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:44<00:12, 12.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:54<00:00, 14.18s/it]
Device 0: Cor=9, CoT=2, Total=25
Accuracy on validation set: 37 / 100 = 0.37
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 179.99 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29032.28 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 155.38 examples/s]
Training Epoch: 5/20, batch 781/782 completed (loss: 0.0481: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:18<00:00,  1.71s/it]
logging training data
eval loss 0.5235474854707718
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24*.5=12>>
<<12+12=24>>
<<24*100=2400>>
### 2400<|end_of_text|>'
Extracted Output: '2400'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:51, 14.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
<<600-240=360>>
### 360<|end_of_text|>'
Extracted Output: '360'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:52, 15.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2.5*2=5>>
<<3.5+4.5+8+5+3.5=24>>
### 24<|end_of_text|>'
Extracted Output: '24'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:49<06:11, 16.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<130/12=11.67>>
<<12-11.67=0.33>>
<<0.33*10=3.3>>
### 3<|end_of_text|>'
Extracted Output: '3'
Test accuracy: 0.0:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:05<05:48, 16.60s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<15-10=5>>
<<2*10=20>>
<<5+20=25>>
### 25<|end_of_text|>'
Extracted Output: '25'
Test accuracy: 0.0:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:19<05:16, 15.81s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.0:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:35<04:58, 15.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.14:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:47<04:24, 14.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.12:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [02:03<04:16, 15.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.11:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:15<03:42, 13.90s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.1:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:24<03:08, 12.54s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.09:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:43<03:23, 14.50s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:56<03:01, 13.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.15:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:07<02:37, 13.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.21:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:25<02:39, 14.47s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:47<02:49, 16.92s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.19:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:07<02:41, 17.95s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:25<02:22, 17.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:37<01:53, 16.22s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.21:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:54<01:37, 16.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:05<01:13, 14.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.24:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:23<01:03, 15.84s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:35<00:44, 14.67s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.26:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:44<00:25, 12.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:56<00:12, 12.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.28: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:09<00:00, 14.78s/it]
Device 0: Cor=7, CoT=2, Total=25
Accuracy on validation set: 33 / 100 = 0.33
CoT match on validation set: 9 / 100 = 0.09
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 168.17 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 26763.02 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 167.31 examples/s]
Training Epoch: 6/20, batch 781/782 completed (loss: 0.0483: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:17<00:00,  1.71s/it]
logging training data
eval loss 0.5927186906337738
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*.5=.5>>
<<12*.5=.6>>
<<100*.6=60>>
### 60<|end_of_text|>'
Extracted Output: '60'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:17, 13.22s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*40*.01=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:29<05:46, 15.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2.25*2=4.50>>
<<2*4=8>>
<<4+8+3.5+2.5+3.5=18>>
### 18<|end_of_text|>'
Extracted Output: '18'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:44<05:25, 14.78s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<130/12=10.5>>
<<10-10=0>>
<<12-10=2>>
<<(2*10)/2=5>>
<<5*10=50>>
<<130-50=80>>
### 80<|end_of_text|>'
Extracted Output: '80'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:01<05:34, 15.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:11<04:37, 13.88s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:26<04:27, 14.07s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:39<04:05, 13.66s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:51<03:43, 13.12s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.22:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:03<03:24, 12.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.2:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:20<03:31, 14.08s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.18:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:42<03:53, 16.65s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [03:02<03:47, 17.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.23:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:18<03:26, 17.22s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:41<03:27, 18.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:57<03:01, 18.17s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:18<02:50, 18.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:30<02:13, 16.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:44<01:52, 16.12s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:59<01:34, 15.75s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:08<01:08, 13.66s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:28<01:01, 15.47s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:39<00:42, 14.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:49<00:26, 13.03s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [06:03<00:13, 13.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:17<00:00, 15.08s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 35 / 100 = 0.35
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.70 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 28636.04 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 172.09 examples/s]
Training Epoch: 7/20, batch 781/782 completed (loss: 0.0319: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:14<00:00,  1.71s/it]
logging training data
eval loss 0.6508280634880066
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24*.5=12>>
<<12+100=112>>
### 112<|end_of_text|>'
Extracted Output: '112'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:51, 14.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:24<04:27, 11.62s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<1+0.5+3.5=8.00>>
<<4.5+8+3.5=16.00>>
### 16<|end_of_text|>'
Extracted Output: '16'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:43<05:31, 15.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:54<04:44, 13.55s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<20+15=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:05<04:14, 12.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:19<04:06, 12.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.57:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:32<03:57, 13.21s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:44<03:38, 12.83s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:56<03:17, 12.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:05<02:48, 11.26s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:25<03:18, 14.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:39<03:04, 14.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:52<02:44, 13.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:14<02:59, 16.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:29<02:38, 15.83s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:45<02:23, 15.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:02<02:09, 16.13s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:20<01:56, 16.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:40<01:46, 17.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:49<01:15, 15.02s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:11<01:09, 17.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:23<00:46, 15.49s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:34<00:28, 14.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:46<00:13, 13.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:02<00:00, 14.50s/it]
Device 0: Cor=8, CoT=4, Total=25
Accuracy on validation set: 38 / 100 = 0.38
CoT match on validation set: 14 / 100 = 0.14
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 164.39 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 27754.11 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 171.87 examples/s]
Training Epoch: 8/20, batch 781/782 completed (loss: 0.0008: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:16<00:00,  1.71s/it]
logging training data
eval loss 0.5852545499801636
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*0.5=1>>
<<1*12=12>>
<<100/12=8.33>>
### 8.33<|end_of_text|>'
Extracted Output: '8.33'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:51, 14.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
<<600-240=360>>
### 360<|end_of_text|>'
Extracted Output: '360'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:52, 15.32s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.5>>
<<2*4=8>>
<<4.5+8+3.5+2.5+3.5=19>>
### 19<|end_of_text|>'
Extracted Output: '19'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:45<05:34, 15.23s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:56<04:47, 13.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:11<04:38, 13.94s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:28<04:46, 15.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:42<04:23, 14.65s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:59<04:21, 15.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:14<04:06, 15.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:25<03:31, 14.13s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:46<03:46, 16.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:55<03:01, 13.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:09<02:46, 13.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:25<02:39, 14.49s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:47<02:49, 16.93s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:58<02:16, 15.11s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:11<01:55, 14.38s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:24<01:37, 13.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:46<01:38, 16.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:55<01:10, 14.11s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:10<00:57, 14.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:21<00:40, 13.48s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:31<00:24, 12.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:43<00:12, 12.21s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:53<00:00, 14.14s/it] 
Device 0: Cor=10, CoT=2, Total=25
Accuracy on validation set: 37 / 100 = 0.37
CoT match on validation set: 11 / 100 = 0.11
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 180.27 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 28022.42 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 148.05 examples/s]
Training Epoch: 9/20, batch 781/782 completed (loss: 0.0267: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:17<00:00,  1.71s/it]
logging training data
eval loss 0.6901198029518127
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/.5=4>>
<<4*12=48>>
<<100/48=2.17>>
### 2.17<|end_of_text|>'
Extracted Output: '2.17'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:15, 13.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200/3=66.66666666666667>>
<<40*.01*67=26.8>>
### 26<|end_of_text|>'
Extracted Output: '26'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:27<05:19, 13.91s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.5>>
<<4.5+3.5+0.5+2.5=12>>
### 12<|end_of_text|>'
Extracted Output: '12'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:39<04:46, 13.03s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:50<04:18, 12.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:07<04:39, 13.98s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:22<04:28, 14.13s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:34<04:01, 13.43s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:47<03:48, 13.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:58<03:24, 12.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:07<02:53, 11.57s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:26<03:12, 13.73s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:37<02:48, 12.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:48<02:29, 12.45s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:05<02:29, 13.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:22<02:27, 14.78s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:36<02:11, 14.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:46<01:44, 13.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [03:59<01:31, 13.06s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:19<01:30, 15.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:26<01:03, 12.67s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:43<00:56, 14.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:55<00:39, 13.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:04<00:24, 12.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:17<00:12, 12.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:34<00:00, 13.39s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 35 / 100 = 0.35
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 173.44 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 26925.04 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 156.05 examples/s]
Training Epoch: 10/20, batch 781/782 completed (loss: 0.0258: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:16<00:00,  1.71s/it]
logging training data
eval loss 0.6731885075569153
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/0.5=4>>
<<100/4=25>>
### 25<|end_of_text|>'
Extracted Output: '25'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:51, 14.65s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200/3=66.66666666666667>>
<<66*.4=26.8>>
### 26.8<|end_of_text|>'
Extracted Output: '26.8'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:25<04:46, 12.45s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<4.50+3.50=8>>
<<2*4.25=9.50>>
<<9.50+8+3.5+0.5=23>>
### 23<|end_of_text|>'
Extracted Output: '23'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:44<05:39, 15.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:55<04:49, 13.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.2:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:04<04:00, 12.00s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.17:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:16<03:46, 11.90s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:29<03:38, 12.15s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:39<03:16, 11.54s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [01:50<03:03, 11.45s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:00<02:43, 10.87s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:20<03:14, 13.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:31<02:48, 12.98s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:47<02:45, 13.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:05<02:45, 15.03s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:23<02:41, 16.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:39<02:23, 15.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:49<01:53, 14.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:01<01:34, 13.56s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:15<01:22, 13.73s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:24<01:01, 12.25s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:40<00:53, 13.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:53<00:40, 13.38s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:02<00:24, 12.00s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:14<00:11, 12.00s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:28<00:00, 13.13s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 13 / 100 = 0.13
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.68 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 26115.23 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 167.69 examples/s]
Training Epoch: 11/20, batch 781/782 completed (loss: 0.0604: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:15<00:00,  1.71s/it]
logging training data
eval loss 0.6633166372776031
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/0.5=4>>
<<12/4=3>>
<<100*3=300>>
### 300<|end_of_text|>'
Extracted Output: '300'
Test accuracy: 1.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:50, 14.62s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
<<600-240=360>>
### 360<|end_of_text|>'
Extracted Output: '360'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:52, 15.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8+5+3.50=20.00>>
### 20<|end_of_text|>'
Extracted Output: '20'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:48<06:07, 16.72s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:00<05:06, 14.58s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:13<04:45, 14.27s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:28<04:32, 14.34s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:42<04:14, 14.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:52<03:39, 12.90s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:03<03:18, 12.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:12<02:49, 11.28s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:33<03:21, 14.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:42<02:45, 12.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:53<02:27, 12.27s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:09<02:26, 13.35s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:28<02:29, 14.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:41<02:08, 14.26s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:54<01:52, 14.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:11<01:44, 14.89s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:25<01:27, 14.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:34<01:04, 12.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:48<00:53, 13.38s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:02<00:40, 13.37s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:10<00:24, 12.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:25<00:12, 12.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:37<00:00, 13.50s/it]
Device 0: Cor=8, CoT=3, Total=25
Accuracy on validation set: 37 / 100 = 0.37
CoT match on validation set: 14 / 100 = 0.14
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 139.95 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29470.34 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.99 examples/s]
Training Epoch: 12:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 12/20, batch 781/782 completed (loss: 0.0873: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:14<00:00,  1.71s/it]
eval loss 0.7098529040813446
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/12=.16666666666666666>>
<<100*.17=17>>
<<17*12=204>>
### 204<|end_of_text|>'
Extracted Output: '204'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:48, 14.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*0.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:26<04:54, 12.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8>>
<<2*2.5=5.00>>
<<1*3.5=3.50>>
<<4.50+8+5+3.5=18.00>>
### 18<|end_of_text|>'
Extracted Output: '18'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:47<06:08, 16.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:58<05:06, 14.57s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<10+20=30>>
<<15+30=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:12<04:45, 14.26s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.67:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:25<04:20, 13.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.71:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:37<04:00, 13.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.62:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:51<03:47, 13.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.56:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:02<03:23, 12.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:11<02:55, 11.70s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:34<03:29, 14.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:44<02:54, 13.42s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.46:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:56<02:35, 12.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:14<02:40, 14.57s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:28<02:24, 14.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:42<02:09, 14.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:54<01:49, 13.67s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:11<01:42, 14.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:33<01:41, 16.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:42<01:12, 14.45s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:00<01:02, 15.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:16<00:46, 15.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:24<00:27, 13.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:36<00:12, 12.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:49<00:00, 14.00s/it] 
Device 0: Cor=10, CoT=2, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 14 / 100 = 0.14
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 174.80 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29168.22 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.23 examples/s]
Training Epoch: 13:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 13/20, batch 781/782 completed (loss: 0.0047: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:12<00:00,  1.70s/it]
eval loss 0.7162297666072845
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/12=.5>>
<<100*.5=50>>
<<50/12=4.17>>
### 4.17<|end_of_text|>'
Extracted Output: '4.17'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:48, 14.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:51, 15.26s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<1*3.50=3.50>>
<<4+8+5+3.50=18.50>>
### 18.50<|end_of_text|>'
Extracted Output: '18.50'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:52<06:44, 18.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:03<05:26, 15.56s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+10+20=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:14<04:39, 14.00s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:28<04:21, 13.77s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:37<03:42, 12.37s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:56<04:07, 14.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:08<03:36, 13.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:17<03:04, 12.27s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:34<03:11, 13.67s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:43<02:38, 12.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:52<02:13, 11.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:09<02:25, 13.19s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:27<02:26, 14.61s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:37<01:57, 13.06s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:48<01:40, 12.51s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:03<01:32, 13.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:22<01:29, 14.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:30<01:05, 13.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:42<00:50, 12.70s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [04:55<00:38, 12.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:07<00:25, 12.56s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:19<00:12, 12.37s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.28: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:34<00:00, 13.40s/it]
Device 0: Cor=7, CoT=2, Total=25
Accuracy on validation set: 35 / 100 = 0.35
CoT match on validation set: 15 / 100 = 0.15
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 163.42 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29097.71 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.67 examples/s]
Training Epoch: 14:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 14/20, batch 781/782 completed (loss: 0.0208: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:15<00:00,  1.71s/it]
eval loss 0.7214444577693939
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24/2=12>>
<<12*100=1200>>
### 1200<|end_of_text|>'
Extracted Output: '1200'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:16, 13.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*0.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:29<05:39, 14.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<3.50+4.50+8+5+3.50=22.50>>
### 22.50<|end_of_text|>'
Extracted Output: '22.50'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:49<06:21, 17.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:03<05:39, 16.19s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<20+10=30>>
<<15+30=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:12<04:30, 13.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.67:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:24<04:06, 12.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.71:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:37<03:51, 12.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.62:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:49<03:33, 12.59s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.56:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:01<03:21, 12.61s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:11<02:54, 11.64s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:30<03:15, 13.99s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:44<03:02, 14.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:53<02:29, 12.43s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:09<02:27, 13.45s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:31<02:41, 16.17s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:50<02:33, 17.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:02<02:03, 15.49s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:14<01:40, 14.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:32<01:33, 15.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:41<01:07, 13.54s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.29:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:56<00:56, 14.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:10<00:42, 14.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.26:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:23<00:27, 13.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.25:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:35<00:12, 12.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.28: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:48<00:00, 13.96s/it]
Device 0: Cor=7, CoT=1, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 175.43 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29182.06 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 170.05 examples/s]
Training Epoch: 15:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 15/20, batch 781/782 completed (loss: 0.0003: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:12<00:00,  1.70s/it]
eval loss 0.7522019743919373
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<100*24=2400>>
### 2400<|end_of_text|>'
Extracted Output: '2400'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:14, 13.12s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:28<05:38, 14.70s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<1*3.50=3.50>>
<<4.50+8+3.50+3.50=17>>
### 17<|end_of_text|>'
Extracted Output: '17'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:47<05:59, 16.33s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:58<05:00, 14.32s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<2*10=20>>
<<10+20=30>>
<<15+30=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:17<05:17, 15.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.67:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:31<04:49, 15.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.71:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:44<04:25, 14.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.62:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:58<04:04, 14.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.67:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:09<03:34, 13.41s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.6:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:19<03:02, 12.20s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.55:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:38<03:21, 14.37s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.58:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:49<02:54, 13.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.54:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:58<02:24, 12.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.57:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:17<02:33, 14.00s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.53:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:30<02:16, 13.69s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:39<01:51, 12.42s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:51<01:38, 12.27s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:03<01:25, 12.17s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:24<01:28, 14.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:43<01:19, 15.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:03<01:09, 17.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:17<00:48, 16.20s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:26<00:28, 14.18s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:40<00:14, 14.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:54<00:00, 14.19s/it]
Device 0: Cor=11, CoT=3, Total=25
Accuracy on validation set: 38 / 100 = 0.38
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 168.87 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 27444.55 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 163.34 examples/s]
Training Epoch: 16:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 16/20, batch 781/782 completed (loss: 0.0002: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:12<00:00,  1.70s/it]
eval loss 0.7462829947471619
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<12/2=6>>
<<6*0.5=3>>
<<4-2=2>>
<<2*12=24>>
<<24/2=12>>
<<12*100=1200>>
### 1200<|end_of_text|>'
Extracted Output: '1200'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:17<07:05, 17.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
<<600-240=360>>
### 360<|end_of_text|>'
Extracted Output: '360'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:32<06:03, 15.80s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8>>
<<2.50*1=2.50>>
<<1.50+2.50+3.50+3.50=11.00>>
### 11<|end_of_text|>'
Extracted Output: '11'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:51<06:19, 17.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:04<05:32, 15.85s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<2*10=20>>
<<10+20=30>>
<<15+30=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:13<04:26, 13.30s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:28<04:24, 13.92s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:40<03:59, 13.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:51<03:34, 12.63s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:09<03:46, 14.17s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.3:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:19<03:10, 12.73s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.27:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:36<03:18, 14.21s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:50<03:04, 14.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:59<02:30, 12.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:09<02:10, 11.82s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:26<02:12, 13.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.31:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:45<02:14, 14.95s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:56<01:50, 13.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:10<01:38, 14.00s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:31<01:36, 16.13s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:43<01:13, 14.66s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:58<00:59, 14.79s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:10<00:41, 13.93s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:18<00:24, 12.39s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:30<00:12, 12.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:46<00:00, 13.86s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 38 / 100 = 0.38
CoT match on validation set: 12 / 100 = 0.12
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 177.16 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 28238.52 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 166.00 examples/s]
Training Epoch: 17:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 17/20, batch 781/782 completed (loss: 0.0049: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:10<00:00,  1.70s/it]
eval loss 0.7563999891281128
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/(1/2)=4>>
<<12/4=3>>
<<100*3=300>>
### 300<|end_of_text|>'
Extracted Output: '300'
Test accuracy: 1.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:48, 14.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200/3=66.66666666666667>>
<<67*0.4=2.8>>
### 2.8<|end_of_text|>'
Extracted Output: '2.8'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:26<04:59, 13.02s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+3.50+8+5+3.50=21.00>>
### 21<|end_of_text|>'
Extracted Output: '21'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:46<05:53, 16.05s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.5:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:57<04:57, 14.15s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+10+20=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:06<04:04, 12.21s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:24<04:28, 14.15s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.57:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:46<05:03, 16.86s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:57<04:16, 15.07s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:11<03:55, 14.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:25<03:36, 14.42s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:47<03:56, 16.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [03:00<03:23, 15.68s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:13<02:57, 14.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:34<03:03, 16.65s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:53<02:54, 17.44s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:09<02:31, 16.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.41:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:22<02:07, 15.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:40<01:55, 16.48s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [05:03<01:49, 18.26s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:11<01:17, 15.41s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:29<01:04, 16.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:45<00:48, 16.06s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:56<00:29, 14.60s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [06:08<00:13, 13.79s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:23<00:00, 15.35s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 35 / 100 = 0.35
CoT match on validation set: 10 / 100 = 0.1
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 168.36 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29922.42 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 165.78 examples/s]
Training Epoch: 18:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 18/20, batch 781/782 completed (loss: 0.006: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:10<00:00,  1.70s/it] 
eval loss 0.7480369508266449
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/(1/2)=4>>
<<12/4=3>>
<<100*3=300>>
### 300<|end_of_text|>'
Extracted Output: '300'
Test accuracy: 1.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:15, 13.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*40*.01=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 1.0:   8%|[34m‚ñä         [0m| 2/25 [00:22<04:13, 11.01s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<4.50+3.50=8.00>>
<<2*4=8.00>>
<<8.00+8.00=16.00>>
### 16<|end_of_text|>'
Extracted Output: '16'
Test accuracy: 0.67:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:40<05:12, 14.20s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.75:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:51<04:33, 13.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+20=35>>
### 35<|end_of_text|>'
Extracted Output: '35'
Test accuracy: 0.6:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:00<03:50, 11.51s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.67:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:16<04:04, 12.85s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.71:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:28<03:50, 12.79s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.62:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:40<03:29, 12.30s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.56:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:00<03:57, 14.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:09<03:14, 12.96s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:31<03:39, 15.66s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:42<03:08, 14.53s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.46:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [02:55<02:47, 13.96s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:13<02:46, 15.15s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.47:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:32<02:43, 16.31s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:43<02:12, 14.68s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.53:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [03:54<01:49, 13.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.56:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:12<01:44, 14.92s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.53:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:33<01:40, 16.77s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:42<01:11, 14.37s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.48:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [04:57<00:58, 14.59s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.45:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:08<00:40, 13.58s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.48:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:17<00:24, 12.14s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.46:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:29<00:12, 12.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.48: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:45<00:00, 13.83s/it]
Device 0: Cor=12, CoT=3, Total=25
Accuracy on validation set: 43 / 100 = 0.43
CoT match on validation set: 14 / 100 = 0.14
saving model.
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 166.60 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 27697.55 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 163.54 examples/s]
Training Epoch: 19:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 19/20, batch 781/782 completed (loss: 0.0002: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:11<00:00,  1.70s/it]
eval loss 0.7050198614597321
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2/12=.1667>>
<<.1667=0.167>>
<<100*0.167=17.05>>
### 17.05<|end_of_text|>'
Extracted Output: '17.05'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:14<05:48, 14.53s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200/3=66.67>>
<<40/100*67=26.8>>
### 26.8<|end_of_text|>'
Extracted Output: '26.8'
Test accuracy: 0.0:   8%|[34m‚ñä         [0m| 2/25 [00:30<05:51, 15.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<4*.50=2.00>>
<<2*4=8.00>>
<<3.50+2.00+8+3.50=20.50>>
### 20.50<|end_of_text|>'
Extracted Output: '20.50'
Test accuracy: 0.0:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:49<06:13, 16.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<12*10=120>>
<<130-120=10>>
### 10<|end_of_text|>'
Extracted Output: '10'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [01:00<05:08, 14.70s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+10+20=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:13<04:39, 13.95s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:31<04:50, 15.29s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.57:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:44<04:25, 14.76s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [02:00<04:16, 15.09s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:13<03:49, 14.31s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:22<03:12, 12.82s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:42<03:28, 14.91s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [02:50<02:49, 13.04s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:07<02:48, 14.08s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:26<02:51, 15.55s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:46<02:49, 16.99s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [03:57<02:17, 15.25s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:11<01:59, 14.88s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:22<01:34, 13.46s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:36<01:22, 13.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [04:47<01:04, 12.98s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:09<01:02, 15.71s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:21<00:43, 14.57s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:30<00:25, 12.83s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:43<00:12, 12.87s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [05:56<00:00, 14.27s/it]
Device 0: Cor=9, CoT=1, Total=25
Accuracy on validation set: 36 / 100 = 0.36
CoT match on validation set: 11 / 100 = 0.11
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 177.61 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50000/50000 [00:01<00:00, 29145.40 examples/s]
Map (num_proc=32): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 167.25 examples/s]
Training Epoch: 20:   0%|[34m          [0m| 0/782 [00:00<?, ?it/s]wandb: WARNING Serializing object of type str that is 120692 bytes
logging training data
Training Epoch: 20/20, batch 781/782 completed (loss: 0.0017: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 782/782 [22:12<00:00,  1.70s/it]
eval loss 0.7178187370300293
Test Accuracy:   0%|[34m          [0m| 0/25 [00:00<?, ?it/s]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 0: Answer = '300' CoT = '<<4-2=2>>
<<2/.5=4>>
<<12/4=3>>
<<100*3=300>>'
Full output: '<|begin_of_text|>John cuts his grass to 2 inches.  It grows.5 inches per month.  When it gets to 4 inches he cuts it back down to 2 inches.  It cost $100 to get his grass cut.  How much does he pay per year?
<<4-2=2>>
<<2*12=24>>
<<24/.5=48>>
<<48*100=4800>>
### 4800<|end_of_text|>'
Extracted Output: '4800'
Test accuracy: 0.0:   4%|[34m‚ñç         [0m| 1/25 [00:13<05:15, 13.15s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 4: Answer = '240' CoT = '<<200*3=600>>
<<600*.4=240>>'
Full output: '<|begin_of_text|>Tom bought his games for $200.  They tripled in value and he then sold 40% of them.  How much did he sell the games for?
<<200*3=600>>
<<600*.4=240>>
### 240<|end_of_text|>'
Extracted Output: '240'
Test accuracy: 0.5:   8%|[34m‚ñä         [0m| 2/25 [00:29<05:38, 14.74s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 8: Answer = '25' CoT = '<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.50=5.00>>
<<4.50+8.00+.50+5.00+3.50+3.50=25.00>>'
Full output: '<|begin_of_text|>It‚Äôs Meghan‚Äôs turn to pick up her team's coffee order.  She needs 2 drip coffees that are $2.25 each and one double shot espresso that‚Äôs $3.50.  She needs 2 lattes that are $4.00 and needs to add vanilla syrup to one of those for an additional $0.50.  She also needs 2 cold brew coffees that are $2.50 each and 1 cappuccino for $3.50.  How much is the coffee order?
<<2*2.25=4.50>>
<<2*4=8.00>>
<<2*2.5=5.00>>
<<1+8+5+3.5=17.50>>
### 17.50<|end_of_text|>'
Extracted Output: '17.50'
Test accuracy: 0.33:  12%|[34m‚ñà‚ñè        [0m| 3/25 [00:47<06:03, 16.52s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 12: Answer = '10' CoT = '<<12*10=120>>
<<130-120=10>>'
Full output: '<|begin_of_text|>Joshua packs 12 bottles in each crate. He has a total of 130 bottles and 10 crates. How many bottles will not be placed in a crate?
<<130/12=10.833333333333333>>
<<11*12=132>>
<<132-130=2>>
### 2<|end_of_text|>'
Extracted Output: '2'
Test accuracy: 0.25:  16%|[34m‚ñà‚ñå        [0m| 4/25 [00:58<05:03, 14.44s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Question 16: Answer = '45' CoT = '<<10+15=25>>
<<2*10=20>>
<<20+25=45>>'
Full output: '<|begin_of_text|>Olivia gave William 10 napkins. Amelia also gives William twice the number of napkins Olivia gave him. If William had 15 napkins before, how many napkins does he have now?
<<10*2=20>>
<<15+10+20=45>>
### 45<|end_of_text|>'
Extracted Output: '45'
Test accuracy: 0.4:  20%|[34m‚ñà‚ñà        [0m| 5/25 [01:12<04:43, 14.18s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  24%|[34m‚ñà‚ñà‚ñç       [0m| 6/25 [01:27<04:33, 14.38s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.57:  28%|[34m‚ñà‚ñà‚ñä       [0m| 7/25 [01:41<04:14, 14.16s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.5:  32%|[34m‚ñà‚ñà‚ñà‚ñè      [0m| 8/25 [01:56<04:05, 14.46s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.44:  36%|[34m‚ñà‚ñà‚ñà‚ñå      [0m| 9/25 [02:07<03:35, 13.45s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  40%|[34m‚ñà‚ñà‚ñà‚ñà      [0m| 10/25 [02:16<03:03, 12.23s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.36:  44%|[34m‚ñà‚ñà‚ñà‚ñà‚ñç     [0m| 11/25 [02:39<03:35, 15.36s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.42:  48%|[34m‚ñà‚ñà‚ñà‚ñà‚ñä     [0m| 12/25 [03:00<03:42, 17.10s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  52%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè    [0m| 13/25 [03:15<03:17, 16.49s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.43:  56%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå    [0m| 14/25 [03:36<03:17, 17.97s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.4:  60%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    [0m| 15/25 [03:54<02:59, 17.95s/it] Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.38:  64%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç   [0m| 16/25 [04:08<02:31, 16.78s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  68%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä   [0m| 17/25 [04:18<01:56, 14.59s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.39:  72%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè  [0m| 18/25 [04:33<01:42, 14.64s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.37:  76%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå  [0m| 19/25 [04:52<01:36, 16.15s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  80%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  [0m| 20/25 [05:06<01:17, 15.42s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  84%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç [0m| 21/25 [05:24<01:05, 16.28s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32:  88%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä [0m| 22/25 [05:34<00:42, 14.24s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.35:  92%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè[0m| 23/25 [05:43<00:25, 12.60s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.33:  96%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå[0m| 24/25 [05:56<00:12, 12.94s/it]Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
Test accuracy: 0.32: 100%|[34m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà[0m| 25/25 [06:07<00:00, 14.68s/it]
Device 0: Cor=8, CoT=2, Total=25
Accuracy on validation set: 37 / 100 = 0.37
CoT match on validation set: 14 / 100 = 0.14
